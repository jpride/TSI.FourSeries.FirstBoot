using Crestron.SimplSharp;
using Newtonsoft.Json;
using System;


namespace TSI.FourSeries.FirstBoot
{

    public class FirstBoot
    {
        private BootRecord _bootRecord = new BootRecord();

        private string _filecontents;
        private string _filelocation;


        public FirstBoot()
        {
            //empty initilizer
        }

        public event EventHandler<BootRecordReadEventArgs> BootRecordReadEventToCall;

        public string FileLocation
        {
            get { return this._filelocation; }
            set { this._filelocation = value; }
        }

        /// <summary>
        /// this method is the only one exposed to simpl+ because it is public and the others are private. This method, when successful in reading the file, will in turn, call the others, so it need not be exposed.
        /// </summary>
        public void Initialize()
        {
            if (FileOperations.CheckFileExists(_filelocation))
            {
                _filecontents = FileOperations.ReadFile(_filelocation);
                if (Debug.debugEnable) CrestronConsole.PrintLine("fileContents: {0}", _filecontents.ToString());

            }
            else
            {
                if (Debug.debugEnable) CrestronConsole.PrintLine(Constants.FileNotFoundCreatingNewFileMessage, _filelocation);

                //create a default json string
                try
                {
                    string jsonTemplate = Constants.DefaultFileContents;
                    if (Debug.debugEnable) CrestronConsole.PrintLine(jsonTemplate);

                    //Write default string to file
                    FileOperations.WriteFile(_filelocation, jsonTemplate);

                    //Read file
                    _filecontents = FileOperations.ReadFile(_filelocation);

                }
                catch (Exception ex)
                {
                    CrestronConsole.PrintLine(Constants.InitializeExceptionMessage, ex.Message);
                }
            }

            DeserializeJSON();
        }

        public void SetDebug(ushort flag)
        {
            Debug.SetDebug(flag);
        }

        /// <summary>
        /// This method is called after the file is successfully read. It will deserialize the file contents into a collection of objects. These objects are difined in the "Structures.cs" class. 
        /// The objects in structures.cs can be automatically generated by running your json file through www.json2csharp.com.
        /// </summary>
        private void DeserializeJSON()
        {
            try
            {
                if (!_filecontents.Equals(String.Empty) && !_filecontents.Equals(null))
                {
                    _bootRecord = JsonConvert.DeserializeObject<BootRecord>(_filecontents);
                    ProcessBootRecord();
                }
                else
                {
                    CrestronConsole.PrintLine(Constants.NothingToDeserializeMessage);
                }
            }
            catch (Exception e)
            {
                ErrorLog.Error(Constants.ErrorConvertingFileContentsMessage, _filecontents, e.Message);
                CrestronConsole.PrintLine(Constants.ErrorConvertingFileContentsMessage, _filecontents, e.Message);
            }
        }

        /// <summary>
        /// Write the new bootrecord to file
        /// </summary>
        public void WriteBootRecordToFile()
        {
            var UpdatedJson = JsonConvert.SerializeObject(_bootRecord);
            FileOperations.WriteFile(_filelocation, UpdatedJson);
        }


        private void ProcessBootRecord()
        {

            BootRecordReadEventArgs args = new BootRecordReadEventArgs()
            {
                previousBootCount = _bootRecord.bootcount,
                newBootCount = (ushort)(_bootRecord.bootcount + 1)
            };

            //update the file with new value
            _bootRecord.bootcount++;
            WriteBootRecordToFile();

            //call eventhandler
            if (!BootRecordReadEventToCall.Equals(null))
            {
                BootRecordReadEventToCall(this, args);
            }

        }

        public void ResetBootCount()
        {
            _bootRecord.bootcount = 0;
            ProcessBootRecord();
        }
    }
}
